{"version":3,"sources":["components/jumbotron/Jumbotron.js","components/request/Yelp.js","components/Business/Business.js","components/ResponseArea/ResponseArea.js","components/Searchbar/Searchbar.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","Yelp","url","apiKey","makeRequest","location","term","sortBy","endpoint","this","fetch","headers","Authorization","then","response","ok","json","console","log","responseJson","catch","networkError","message","Business","props","business","name","src","image_url","alt","height","categories","title","city","rating","review_count","adress1","zip_code","ResponseArea","businesses","map","key","id","Searchbar","type","placeholder","onChange","event","onTermChange","target","value","onLocationChange","required","onClick","App","state","handleLocationChange","bind","handleTermChange","handleClick","setState","preventDefault","length","renderResponse","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.e2e0b41e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Jumbotron = () => {\r\n    return (\r\n    <div className=\"jumbotron jumbotron-fluid\">\r\n        <div className=\"container\">\r\n            <h1 className=\"display-4\">Hii, this app uses Yelp public API</h1>\r\n            <p className=\"lead\">For a valid result please fill search prompts strings using English. \r\n            For this API version you will recieve valid results only for locations from Europe and USA</p>\r\n        </div>\r\n    </div>\r\n    )\r\n}","export const Yelp = {\r\n    url: 'https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?',\r\n    apiKey: 'HQNwYMc7dtjc7oi8Qq7IkBwQEEkiH-a0KhwMbKQ_r7EdfLEWqAYXipWD-dFvsZAIpnj8R09C5kLr4KJQmqtnxN5k4t7O-0fv74MUOGmcn7Dykiq74D_6EuorVpcZX3Yx',\r\n   makeRequest(location, term, sortBy) {\r\n        const endpoint = this.url + 'location=' + location + '&term=' + term + '&sort_by' + sortBy;\r\n       return fetch(endpoint, {\r\n            headers: {\r\n                Authorization: 'Bearer ' + this.apiKey\r\n            }\r\n        }).then(response => {\r\n            if (response.ok) {\r\n                return response.json()\r\n            } else {\r\n                console.log('request failed')\r\n            }\r\n        }).then(responseJson => {\r\n            //console.log(responseJson)\r\n            return responseJson\r\n        })\r\n        .catch(networkError => {console.log(networkError.message)})\r\n    } \r\n\r\n    /* makeRequest: async function (location, term, sortBy){\r\n    const endpoint = this.url + 'location=' + location + '&term=' + term + '&sort_by' + sortBy;\r\n    try {const response = await fetch(endpoint, {\r\n        headers: {\r\n            Authorization: 'Bearer ' + this.apiKey \r\n        }\r\n    });\r\n    if (response.ok) {\r\n        const responseJson = await response.json()\r\n        //console.log(responseJson)\r\n        return responseJson\r\n    } else {\r\n        console.log('request failed')\r\n    }\r\n    } catch (netwrorkError) {\r\n        console.log(netwrorkError.message)\r\n    }\r\n    } */\r\n}","import React from 'react';\r\n\r\n\r\n\r\n  \r\n  export const Business = props => {\r\n     return <div className='col-12 col-md-4 col-lg-3 mb-4 mx-auto'>\r\n       <div className='card p-0'>\r\n        <h5 className='card-title text-center'>\r\n             {props.business.name}\r\n         </h5>\r\n         <img src={props.business.image_url} className='card-img' alt='logo' height='200px'/>\r\n         <div className=\"card-body d-flex justify-content-between p-0\">\r\n             <div>\r\n                <div>{props.business.name}</div>\r\n                <div>{props.business.categories[0].title}</div>\r\n                <div>{props.business.location.city}</div>\r\n             </div>\r\n             <div>\r\n                <div><span className=\"badge badge-info\">{props.business.rating}</span> stars</div>\r\n                <div>{props.business.review_count} reviews</div>\r\n                <div>{props.business.location.adress1 ? props.business.location.adress1 : props.business.location.zip_code}</div>\r\n             </div>\r\n         </div>\r\n         </div>\r\n     </div>\r\n  }","import React from 'react'\r\nimport { Business } from '../Business/Business'\r\n\r\n\r\nexport const ResponseArea = props =>{\r\n\r\n   return (\r\n    <div className='container'>\r\n        <div className=\"row\">\r\n            {props.businesses.map(business => {\r\n                return <Business key={business.id} business={business}/>\r\n            })}    \r\n        </div>\r\n    </div>\r\n   )\r\n}\r\n","import React from 'react';\r\n\r\nexport const Searchbar = props => {\r\n\r\n    const handleLocationChange = event => {\r\n        props.onLocationChange(event.target.value)\r\n    }\r\n\r\n    const handleTermChange = event => {\r\n        props.onTermChange(event.target.value)\r\n    }\r\n\r\n    return(\r\n        <form className=\"mb-3\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-6 mb-2\">\r\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Business\" onChange={handleTermChange}/>\r\n                </div>\r\n                <div className=\"col-12 col-md-6\">\r\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Where\" onChange={handleLocationChange} required />\r\n                </div>\r\n                <input type=\"submit\"  className=\"btn btn-outline-primary mt-3 mx-auto px-5\" value=\"send\" onClick={props.onClick}/>\r\n            </div>    \r\n        </form>\r\n    )\r\n}","import React from 'react';\r\nimport './App.scss';\r\nimport { Jumbotron } from './components/jumbotron/Jumbotron';\r\nimport { Yelp } from './components/request/Yelp';\r\nimport { ResponseArea } from './components/ResponseArea/ResponseArea';\r\nimport { Searchbar } from './components/Searchbar/Searchbar';\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        businesses: [],\r\n        location: '',\r\n        term: '',\r\n        sortBy: 'best_match'\r\n      };\r\n      \r\n      this.handleLocationChange = this.handleLocationChange.bind(this);\r\n      this.handleTermChange = this.handleTermChange.bind(this);\r\n      this.handleClick = this.handleClick.bind(this)\r\n    }\r\n\r\n    handleLocationChange(location){\r\n      this.setState({location: location})\r\n    }\r\n\r\n    handleTermChange(term){\r\n      this.setState({term:term})\r\n    }\r\n\r\n    handleClick(event) {\r\n      event.preventDefault();\r\n      Yelp.makeRequest(this.state.location, this.state.term, this.state.sortBy)\r\n      .then(response => {\r\n        console.log(response)\r\n        if(response){\r\n          this.setState({businesses: response.businesses})\r\n        } else {\r\n          this.setState({businesses: []})\r\n        }\r\n      });       \r\n    }\r\n\r\n    renderResponse(){\r\n      if (this.state.businesses.length){\r\n      return(\r\n        <ResponseArea businesses={this.state.businesses}/>\r\n      )} else {\r\n        return <Jumbotron />\r\n      }\r\n    }\r\n\r\n\r\n    render(){\r\n      return (\r\n      <div className='container'>\r\n\r\n          <h1>With Yelp App</h1>\r\n          <Searchbar onLocationChange={this.handleLocationChange} onTermChange={this.handleTermChange} onClick={this.handleClick}/>\r\n          {this.renderResponse()}\r\n      </div>\r\n      );  \r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}